---------DATABASE CREATION----------------

mysql> CREATE DATABASE problemset03;
Query OK, 1 row affected (0.07 sec)

mysql> USE problemset03;
Database changed

---------TABLE CREATION-------------------

mysql> CREATE TABLE movie (mID INT PRIMARY KEY,title VARCHAR(30),year INT,director VARCHAR(20));
Query OK, 0 rows affected (0.28 sec)

mysql> CREATE TABLE reviewer (rID INT PRIMARY KEY,name VARCHAR(30));
Query OK, 0 rows affected (0.09 sec)

mysql> CREATE TABLE rating(rID INT, mID INT, stars INT,ratingDate date, FOREIGN KEY(rID) REFERENCES reviewer(rID),FOREIGN KEY(mID) REFERENCES movie(mID));
Query OK, 0 rows affected (0.20 sec)


---------VALUE INSERTION------------------

mysql> INSERT INTO movie(mID,title,year,director) VALUES (101,"Gone with the wild",1939,"Victor Fleming");
Query OK, 1 row affected (0.13 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (102,"Star Wars",1977,"George Lucas");
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (103,"The Sound Of Music",1965,"Robert Wise");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (104,"E.T.",1982,"Steven Spielberg");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (105,"Titanic",1997,"James Cameron");
Query OK, 1 row affected (0.05 sec)

mysql> INSERT INTO movie(mID,title,year) VALUES (106,"Snow White",1937);
Query OK, 1 row affected (0.05 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (107,"Avatar",2009,"James Cameron");
Query OK, 1 row affected (0.06 sec)

mysql> INSERT INTO movie(mID,title,year,director) VALUES (108,"Raiders of the Lost Ark",1981,"Steven Spielberg");
Query OK, 1 row affected (0.03 sec)



mysql> INSERT INTO reviewer(rID,name) VALUES (201,"Sarah Martinez");
Query OK, 1 row affected (0.07 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (202,"Daniel Lewis");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (203,"Britanny Harris");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (204,"Mike Anderson");
Query OK, 1 row affected (0.05 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (205,"Chris Jackson");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (206,"Elizabeth Thomas");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (207,"James Cameron");
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO reviewer(rID,name) VALUES (208,"Ashley White");
Query OK, 1 row affected (0.03 sec)



mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (201,101,2,'20110122');
Query OK, 1 row affected (0.09 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (201,101,4,'20110127');
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO Rating(rId,mId,stars) VALUES (202,106,4);
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (203,103,2,'20110120');
Query OK, 1 row affected (0.05 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (203,108,4,'20110112');
Query OK, 1 row affected (0.09 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (203,108,2,'20110130');
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (204,101,3,'20110109');
Query OK, 1 row affected (0.07 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (205,103,3,'20110127');
Query OK, 1 row affected (0.06 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (205,104,2,'20110122');
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO Rating(rId,mId,stars) VALUES (205,108,4);
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (206,107,3,'20110115');
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (206,106,5,'20110119');
Query OK, 1 row affected (0.04 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (207,107,5,'20110120');
Query OK, 1 row affected (0.06 sec)

mysql> INSERT INTO Rating(rId,mId,stars,ratingDate) VALUES (208,104,3,'20110102');
Query OK, 1 row affected (0.06 sec)



mysql> SELECT * FROM movie;
+-----+-------------------------+------+------------------+
| mID | title                   | year | director         |
+-----+-------------------------+------+------------------+
| 101 | Gone with the wild      | 1939 | Victor Fleming   |
| 102 | Star Wars               | 1977 | George Lucas     |
| 103 | The Sound Of Music      | 1965 | Robert Wise      |
| 104 | E.T.                    | 1982 | Steven Spielberg |
| 105 | Titanic                 | 1997 | James Cameron    |
| 106 | Snow White              | 1937 | NULL             |
| 107 | Avatar                  | 2009 | James Cameron    |
| 108 | Raiders of the Lost Ark | 1981 | Steven Spielberg |
+-----+-------------------------+------+------------------+
8 rows in set (0.00 sec)


mysql> SELECT * FROM reviewer;
+-----+------------------+
| rID | name             |
+-----+------------------+
| 201 | Sarah Martinez   |
| 202 | Daniel Lewis     |
| 203 | Britanny Harris  |
| 204 | Mike Anderson    |
| 205 | Chris Jackson    |
| 206 | Elizabeth Thomas |
| 207 | James Cameron    |
| 208 | Ashley White     |
+-----+------------------+
8 rows in set (0.00 sec)


mysql> SELECT * FROM rating;
+------+------+-------+------------+
| rID  | mID  | stars | ratingDate |
+------+------+-------+------------+
|  201 |  101 |     2 | 2011-01-22 |
|  201 |  101 |     4 | 2011-01-27 |
|  202 |  106 |     4 | NULL       |
|  203 |  103 |     2 | 2011-01-20 |
|  203 |  108 |     4 | 2011-01-12 |
|  203 |  108 |     2 | 2011-01-30 |
|  204 |  101 |     3 | 2011-01-09 |
|  205 |  103 |     3 | 2011-01-27 |
|  205 |  104 |     2 | 2011-01-22 |
|  205 |  108 |     4 | NULL       |
|  206 |  107 |     3 | 2011-01-15 |
|  206 |  106 |     5 | 2011-01-19 |
|  207 |  107 |     5 | 2011-01-20 |
|  208 |  104 |     3 | 2011-01-02 |
+------+------+-------+------------+
14 rows in set (0.00 sec)




-------------------------------QUERIES--------------------------------------------

1. Find the titles of all movies directed by Steven Spielberg. (1 point possible)

mysql> SELECT title FROM movie WHERE director="Steven Spielberg";
+-------------------------+
| title                   |
+-------------------------+
| E.T.                    |
| Raiders of the Lost Ark |
+-------------------------+
2 rows in set (0.01 sec)

****************************************************************************************************************************************

2. Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. (1 point possible)

mysql> SELECT year FROM movie WHERE mID IN (SELECT mID FROM rating WHERE stars IN (4,5)) ORDER BY year;
+------+
| year |
+------+
| 1937 |
| 1939 |
| 1981 |
| 2009 |
+------+
4 rows in set (0.07 sec)

****************************************************************************************************************************************

3. Find the titles of all movies that have no ratings. (1 point possible)

mysql> SELECT title FROM movie WHERE mID NOT IN (SELECT mID from rating);
+-----------+
| title     |
+-----------+
| Star Wars |
| Titanic   |
+-----------+
2 rows in set (0.04 sec)

****************************************************************************************************************************************

4. Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. (1 point possible)

mysql> SELECT name FROM reviewer WHERE rID IN (SELECT rID FROM rating WHERE ratingDate IS NULL);
+---------------+
| name          |
+---------------+
| Daniel Lewis  |
| Chris Jackson |
+---------------+
2 rows in set (0.00 sec)


****************************************************************************************************************************************

5. Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. (1 point possible)

mysql> SELECT r1.name AS "Reviewer name",m.title AS "Movie title",r2.stars AS "Stars",r2.ratingDate AS "Rating date" FROM movie m,reviewer r1,rating r2 WHERE m.mID=r2.mID AND r1.rID=r2.rID ORDER BY r1.name,m.title,Stars;
+------------------+-------------------------+-------+-------------+
| Reviewer name    | Movie title             | Stars | Rating date |
+------------------+-------------------------+-------+-------------+
| Ashley White     | E.T.                    |     3 | 2011-01-02  |
| Britanny Harris  | Raiders of the Lost Ark |     2 | 2011-01-30  |
| Britanny Harris  | Raiders of the Lost Ark |     4 | 2011-01-12  |
| Britanny Harris  | The Sound Of Music      |     2 | 2011-01-20  |
| Chris Jackson    | E.T.                    |     2 | 2011-01-22  |
| Chris Jackson    | Raiders of the Lost Ark |     4 | NULL        |
| Chris Jackson    | The Sound Of Music      |     3 | 2011-01-27  |
| Daniel Lewis     | Snow White              |     4 | NULL        |
| Elizabeth Thomas | Avatar                  |     3 | 2011-01-15  |
| Elizabeth Thomas | Snow White              |     5 | 2011-01-19  |
| James Cameron    | Avatar                  |     5 | 2011-01-20  |
| Mike Anderson    | Gone with the wild      |     3 | 2011-01-09  |
| Sarah Martinez   | Gone with the wild      |     2 | 2011-01-22  |
| Sarah Martinez   | Gone with the wild      |     4 | 2011-01-27  |
+------------------+-------------------------+-------+-------------+
14 rows in set (0.00 sec)

***********************************************************************************************************************************************************************

6. For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. (1 point possible)

mysql> SELECT title,name FROM rating r1 JOIN rating r2 ON r1.rID=r2.rID AND r1.mID=r2.mID JOIN movie m ON m.mID=r1.mID JOIN reviewer r ON r.rID=r1.rID WHERE r2.stars > r1.stars AND r2.ratingDate > r1.ratingDate;
+--------------------+----------------+
| title              | name           |
+--------------------+----------------+
| Gone with the wild | Sarah Martinez |
+--------------------+----------------+
1 row in set (0.00 sec)

****************************************************************************************************************************************

7. For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. (1 point possible)

mysql> SELECT title,MAX(stars) AS "MaxStars" FROM movie m JOIN rating r ON m.mID=r.mID GROUP BY title ORDER BY title;
+-------------------------+----------+
| title                   | MaxStars |
+-------------------------+----------+
| Avatar                  |        5 |
| E.T.                    |        3 |
| Gone with the wild      |        4 |
| Raiders of the Lost Ark |        4 |
| Snow White              |        5 |
| The Sound Of Music      |        3 |
+-------------------------+----------+
6 rows in set (0.00 sec)

****************************************************************************************************************************************
8. For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. (1 point possible)

mysql> SELECT m.title,(MAX(stars)-MIN(stars)) AS "RatingSpread" FROM movie m JOIN rating r ON m.mID=r.mID GROUP BY m.title ORDER BY RatingSpread DESC,m.title;
+-------------------------+--------------+
| title                   | RatingSpread |
+-------------------------+--------------+
| Avatar                  |            2 |
| Gone with the wild      |            2 |
| Raiders of the Lost Ark |            2 |
| E.T.                    |            1 |
| Snow White              |            1 |
| The Sound Of Music      |            1 |
+-------------------------+--------------+
6 rows in set (0.00 sec)

****************************************************************************************************************************************

9. Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) (1 point possible)

mysql> SELECT AVG(m1.Before1980) - AVG(m2.After1980) AS "HighAvg" FROM (SELECT AVG(stars) AS "Before1980" FROM rating r JOIN movie m ON r.mID=m.mID WHERE year < 1980 GROUP BY m.mID) as m1, (SELECT AVG(stars) AS "After1980" FROM rating r JOIN movie m ON r.mID=m.mID WHERE year > 1980 GROUP BY m.mID) AS m2;
+------------+
| HighAvg    |
+------------+
| 0.05556667 |
+------------+
1 row in set (0.00 sec)


****************************************************************************************************************************************
10. Find the names of all reviewers who rated Gone with the Wind. (1 point possible)

mysql> SELECT name FROM reviewer WHERE rID IN (SELECT rID FROM rating WHERE mID IN (SELECT mID FROM movie WHERE title="Gone with the wild"));
+----------------+
| name           |
+----------------+
| Sarah Martinez |
| Mike Anderson  |
+----------------+
2 rows in set (0.00 sec)

****************************************************************************************************************************************

11. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> SELECT r.name AS "Reviewer Name",m.title as "Movie Title",r1.stars FROM movie m, reviewer r,rating r1 WHERE m.mID=r1.mID AND r1.rID=r.rID AND r.name=m.director;
+---------------+-------------+-------+
| Reviewer Name | Movie Title | stars |
+---------------+-------------+-------+
| James Cameron | Avatar      |     5 |
+---------------+-------------+-------+
1 row in set (0.00 sec)

****************************************************************************************************************************************


12. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) (1 point possible)

mysql> SELECT CONCAT(name,"-",title) AS NAME FROM Movie JOIN Rating ON Movie.mID=Rating.mID JOIN Reviewer ON Rating.rID=Reviewer.rID ORDER BY NAME;
+-----------------------------------------+
| NAME                                    |
+-----------------------------------------+
| Ashley White-E.T.                       |
| Brittany Harris-Raiders of the Lost Ark |
| Brittany Harris-Raiders of the Lost Ark |
| Brittany Harris-The sound of music      |
| Chris Jackson-E.T.                      |
| Chris Jackson-Raiders of the Lost Ark   |
| Chris Jackson-The sound of music        |
| Daniel Lewis-Snow White                 |
| Elizabeth Thomas-Avatar                 |
| Elizabeth Thomas-Snow White             |
| James Cameron-Avatar                    |
| Mike Anderson-Gone with the Wind        |
| Sarah Martinez-Gone with the Wind       |
| Sarah Martinez-Gone with the Wind       |
+-----------------------------------------+
14 rows in set (0.00 sec)

****************************************************************************************************************************************


13. Find the titles of all movies not reviewed by Chris Jackson. (1 point possible)

mysql> SELECT title FROM movie WHERE mID NOT IN (SELECT r.mID FROM rating r JOIN reviewer r1 ON r1.rID=r.rID WHERE r1.name="Chris Jackson");
+--------------------+
| title              |
+--------------------+
| Gone with the wild |
| Star Wars          |
| Titanic            |
| Snow White         |
| Avatar             |
+--------------------+
5 rows in set (0.00 sec)

****************************************************************************************************************************************

14. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. (1 point possible)

mysql> SELECT DISTINCT re1.name,re2.name FROM rating r1 JOIN rating r2 ON r1.mID=r2.mID JOIN reviewer re1 ON r1.rID=re1.rID JOIN reviewer re2 ON r2.rID=re2.rID WHERE r1.rID<r2.rID;
+------------------+------------------+
| name             | name             |
+------------------+------------------+
| Sarah Martinez   | Mike Anderson    |
| Britanny Harris  | Chris Jackson    |
| Daniel Lewis     | Elizabeth Thomas |
| Elizabeth Thomas | James Cameron    |
| Chris Jackson    | Ashley White     |
+------------------+------------------+
5 rows in set (0.00 sec)

****************************************************************************************************************************************

15. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. (1 point possible)

mysql> SELECT name,title,stars FROM movie m JOIN rating r ON m.mID=r.mID JOIN reviewer r1 ON r.rID=r1.rID WHERE stars IN (SELECT MIN(stars) FROM rating);
+-----------------+-------------------------+-------+
| name            | title                   | stars |
+-----------------+-------------------------+-------+
| Sarah Martinez  | Gone with the wild      |     2 |
| Britanny Harris | The Sound Of Music      |     2 |
| Britanny Harris | Raiders of the Lost Ark |     2 |
| Chris Jackson   | E.T.                    |     2 |
+-----------------+-------------------------+-------+
4 rows in set (0.00 sec)

****************************************************************************************************************************************

16. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. (1 point possible)

mysql> SELECT title,AVG(stars) AS "AvgStars" FROM movie m JOIN rating r ON m.mID=r.mID GROUP BY title ORDER BY AvgStars DESC,title;
+-------------------------+----------+
| title                   | AvgStars |
+-------------------------+----------+
| Snow White              |   4.5000 |
| Avatar                  |   4.0000 |
| Raiders of the Lost Ark |   3.3333 |
| Gone with the wild      |   3.0000 |
| E.T.                    |   2.5000 |
| The Sound Of Music      |   2.5000 |
+-------------------------+----------+
6 rows in set (0.00 sec)

****************************************************************************************************************************************

17. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) (1 point possible)

mysql> SELECT name FROM reviewer r JOIN rating r1 ON r.rID=r1.rID GROUP BY r1.rID HAVING COUNT(r1.stars)>=3;
+-----------------+
| name            |
+-----------------+
| Britanny Harris |
| Chris Jackson   |
+-----------------+
2 rows in set (0.00 sec)

****************************************************************************************************************************************

18. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) (1 point possible)

mysql> select director,GROUP_CONCAT(title) AS "Movies" from movie group by director having count(director)>1 order by director,title;
+------------------+------------------------------+
| director         | Movies                       |
+------------------+------------------------------+
| James Cameron    | Titanic,Avatar               |
| Steven Spielberg | E.T.,Raiders of the Lost Ark |
+------------------+------------------------------+
2 rows in set (0.04 sec)

****************************************************************************************************************************************

19. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

mysql> SELECT m.title,AVG(stars) FROM movie m JOIN rating r ON m.mID=r.mID GROUP BY m.title HAVING AVG(stars) = (SELECT MAX(average) FROM (SELECT AVG(stars) AS "average" FROM rating GROUP BY mID)emp);
+------------+------------+
| title      | AVG(stars) |
+------------+------------+
| Snow White |     4.5000 |
+------------+------------+
1 row in set (0.00 sec)


****************************************************************************************************************************************

20. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) (1 point possible)

mysql> SELECT m.title,AVG(stars) FROM movie m JOIN rating r ON m.mID=r.mID GROUP BY m.title HAVING AVG(stars)=(SELECT MIN(average) FROM (SELECT AVG(stars) AS "average" FROM rating GROUP BY mID)emp);
+--------------------+------------+
| title              | AVG(stars) |
+--------------------+------------+
| E.T.               |     2.5000 |
| The Sound Of Music |     2.5000 |
+--------------------+------------+
2 rows in set (0.00 sec)

**************************************************************************************************************************************

21. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. (1 point possible)

mysql> SELECT title,director,MAX(stars) FROM movie m JOIN rating r ON m.mID=r.mID WHERE director IS NOT NULL GROUP BY r.mID;
+-------------------------+------------------+------------+
| title                   | director         | MAX(stars) |
+-------------------------+------------------+------------+
| Gone with the wild      | Victor Fleming   |          4 |
| The Sound Of Music      | Robert Wise      |          3 |
| E.T.                    | Steven Spielberg |          3 |
| Avatar                  | James Cameron    |          5 |
| Raiders of the Lost Ark | Steven Spielberg |          4 |
+-------------------------+------------------+------------+
5 rows in set (0.00 sec)


**************************************************************************************************************************************
